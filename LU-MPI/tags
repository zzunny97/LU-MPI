!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A_original	LU.cpp	/^Data** A_original;				\/\/ copied A, which is original$/;"	v
Copy_mat	LU.cpp	/^void Copy_mat(Data** src, Data** dst, int size) {$/;"	f
Copy_mat	LU_seq.cpp	/^void Copy_mat(Data** src, Data** dst) {$/;"	f
Copy_to_one	LU.cpp	/^void Copy_to_one(Data** src, Data* dst, int size) {$/;"	f
Copy_to_two	LU.cpp	/^void Copy_to_two(Data* src, Data** dst, int size) {$/;"	f
Data	LU.cpp	/^typedef double Data;$/;"	t	file:
Data	LU_seq.cpp	/^typedef double Data;$/;"	t	file:
Free_mat	LU.cpp	/^void Free_mat(Data** p, int size) {$/;"	f
Free_mat	LU_seq.cpp	/^void Free_mat(Data** p) {$/;"	f
Inverse_mat	LU.cpp	/^void Inverse_mat(Data** p, int size) {$/;"	f
LU	LU.cpp	/^void LU(Data** A, Data** L, Data** U) {$/;"	f
LU	LU_seq.cpp	/^void LU(Data** A, Data** L, Data** U) {$/;"	f
Mul_mat	LU.cpp	/^void Mul_mat(Data** a, Data** b, Data** ret, int size) {$/;"	f
N	LU.cpp	/^int N;							\/\/ final matrix size$/;"	v
N	LU_seq.cpp	/^int N;$/;"	v
Print_mat	LU.cpp	/^void Print_mat(Data** p, int size) {$/;"	f
Print_mat	LU_seq.cpp	/^void Print_mat(Data** p) {$/;"	f
Print_mat2	LU.cpp	/^void Print_mat2(Data** p, int size1, int size2) {$/;"	f
Sub_mat	LU.cpp	/^void Sub_mat(Data** a, Data** b, int size) {$/;"	f
block_LU	LU.cpp	/^void block_LU(Data** a, Data** l, Data** u, int size) {$/;"	f
end_point	LU.cpp	/^struct timeval start_point, end_point;$/;"	v	typeref:struct:
main	LU.cpp	/^int main(int argc, char** argv){$/;"	f
main	LU_seq.cpp	/^int main(int argc, char** argv){$/;"	f
optime	LU.cpp	/^double optime;$/;"	v
original_N	LU.cpp	/^int original_N;				    \/\/ original matrix size$/;"	v
process_size	LU.cpp	/^int process_size;				\/\/ total process number$/;"	v
rank	LU.cpp	/^int rank;						\/\/ # of process$/;"	v
start_point	LU.cpp	/^struct timeval start_point, end_point;$/;"	v	typeref:struct:timeval
verify	LU.cpp	/^void verify(Data** A, Data** L, Data** U, int size) {$/;"	f
verify	LU_seq.cpp	/^void verify(Data** A, Data** L, Data** U) {$/;"	f
verify2	LU.cpp	/^void verify2(Data** A, Data** L, Data** U, int size) {$/;"	f
